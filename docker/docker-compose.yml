services:
  # Traefik Reverse Proxy with SSL
  traefik:
    image: traefik:v3.5.3
    container_name: chatbridge-traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - frontend
    ports:
      - "80:80"
      - "443:443"
    environment:
      - TZ=UTC
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ../docker/traefik/traefik.yml:/traefik.yml:ro
      - ../docker/traefik/dynamic:/dynamic:ro
      - ../docker/traefik/acme:/acme
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_BASIC_AUTH}"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Cloudflare Tunnel
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: chatbridge-cloudflared
    restart: unless-stopped
    command: tunnel --config /etc/cloudflared/config.yml run
    networks:
      - frontend
    volumes:
      - ../docker/cloudflared/config.yml:/etc/cloudflared/config.yml:ro
      - ../docker/cloudflared/credentials.json:/etc/cloudflared/credentials.json:ro
    depends_on:
      traefik:
        condition: service_healthy

  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: chatbridge-postgres
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - backend
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 512M
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=512MB
      -c effective_cache_size=1536MB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=10MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=4
      -c max_parallel_workers_per_gather=2
      -c max_parallel_workers=4

  # Redis Cache
  redis:
    image: redis:8-alpine
    container_name: chatbridge-redis
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - backend
    command:
      - redis-server
      - --requirepass
      - ${REDIS_PASSWORD}
      - --maxmemory
      - 256mb
      - --maxmemory-policy
      - allkeys-lru
      - --save
      - "60"
      - "1000"
      - --appendonly
      - "yes"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 128M

  # LiteLLM Proxy
  litellm:
    image: ghcr.io/berriai/litellm:main-stable
    platform: linux/amd64
    container_name: chatbridge-litellm
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    # Note: read_only disabled for Prisma migrations to work properly
    # read_only: true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    networks:
      - frontend
      - backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${LITELLM_DB}
      - LITELLM_MASTER_KEY=${LITELLM_MASTER_KEY}
      - LITELLM_SALT_KEY=${LITELLM_SALT_KEY}
      - UI_USERNAME=${LITELLM_UI_USERNAME}
      - UI_PASSWORD=${LITELLM_UI_PASSWORD}
      - STORE_MODEL_IN_DB=True
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - PORT=4000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OLLAMA_API_BASE=http://ollama:11434
    volumes:
      - ../docker/litellm/config.yaml:/app/config.yaml:ro
      - litellm_tmp:/tmp
    command: ["--config", "/app/config.yaml", "--port", "4000"]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.litellm.rule=Host(`admin.${DOMAIN}`)"
      - "traefik.http.routers.litellm.entrypoints=web"
      - "traefik.http.services.litellm.loadbalancer.server.port=4000"
      - "traefik.http.routers.litellm-root.rule=Host(`admin.${DOMAIN}`) && Path(`/`)"
      - "traefik.http.routers.litellm-root.entrypoints=web"
      - "traefik.http.routers.litellm-root.middlewares=litellm-redirect"
      - "traefik.http.routers.litellm-root.priority=100"
      - "traefik.http.routers.litellm.middlewares=litellm-ratelimit,security-headers@file"
      - "traefik.http.middlewares.litellm-redirect.redirectregex.regex=.*"
      - "traefik.http.middlewares.litellm-redirect.redirectregex.replacement=/ui"
      - "traefik.http.middlewares.litellm-redirect.redirectregex.permanent=true"
      - "traefik.http.middlewares.litellm-ratelimit.ratelimit.average=100"
      - "traefik.http.middlewares.litellm-ratelimit.ratelimit.burst=50"
      - "traefik.http.middlewares.litellm-ratelimit.ratelimit.period=1m"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "-O-",
          "http://localhost:4000/",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 512M

  # Open WebUI
  open-webui:
    image: ghcr.io/open-webui/open-webui:v0.6.34
    container_name: chatbridge-open-webui
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    networks:
      - frontend
      - backend
    environment:
      - WEBUI_AUTH=True
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${OPENWEBUI_DB}
      - OPENAI_API_BASE_URL=http://litellm:4000/v1
      - OPENAI_API_KEY=${LITELLM_MASTER_KEY}
      - ENABLE_SIGNUP=${ENABLE_SIGNUP:-false}
      - DEFAULT_USER_ROLE=${DEFAULT_USER_ROLE:-user}
      - ENABLE_ADMIN_EXPORT=true
      - WEBUI_NAME=${WEBUI_NAME:-AI Assistant}
      - ENABLE_COMMUNITY_SHARING=false
      - ENABLE_MESSAGE_RATING=true
      - ENABLE_MODEL_FILTER=true
      - MODEL_FILTER_LIST=${MODEL_FILTER_LIST}
      - WEBHOOK_URL=${WEBHOOK_URL}
      - ENABLE_OLLAMA_API=true
      - OLLAMA_BASE_URL=http://ollama:11434
      - TASK_MODEL=${TASK_MODEL}
      - TITLE_AUTO_GENERATION_MODEL=${TITLE_MODEL}
      - SEARCH_QUERY_GENERATION_PROMPT_TEMPLATE=${SEARCH_PROMPT_TEMPLATE}
      - TRANSPORT=websocket
    volumes:
      - open-webui_data:/app/backend/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.open-webui.rule=Host(`ai.${DOMAIN}`)"
      - "traefik.http.routers.open-webui.entrypoints=web"
      - "traefik.http.services.open-webui.loadbalancer.server.port=8080"
      - "traefik.http.routers.open-webui.middlewares=webui-ratelimit"
      - "traefik.http.middlewares.webui-ratelimit.ratelimit.average=200"
      - "traefik.http.middlewares.webui-ratelimit.ratelimit.burst=100"
      - "traefik.http.middlewares.webui-ratelimit.ratelimit.period=1m"
    depends_on:
      postgres:
        condition: service_healthy
      litellm:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 512M

  # Ollama - Local LLM Runtime
  ollama:
    image: ollama/ollama:latest
    container_name: chatbridge-ollama
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - backend
    environment:
      - OLLAMA_HOST=0.0.0.0:11434
      - OLLAMA_ORIGINS=*
    volumes:
      - ollama_data:/root/.ollama
    # Uncomment for GPU support (NVIDIA)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: "4"
          memory: 8G
        reservations:
          cpus: "1"
          memory: 2G

  # Backup Service
  backup:
    image: postgres:17-alpine
    container_name: chatbridge-backup
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - backend
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
      - BACKUP_KEEP_DAYS=7
    volumes:
      - ../backups:/backups
      - ../setup/backup-script.sh:/backup-script.sh:ro
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        while true; do
          /backup-script.sh
          sleep 86400
        done
    depends_on:
      postgres:
        condition: service_healthy

networks:
  frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
  backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/24

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  open-webui_data:
    driver: local
  litellm_tmp:
    driver: local
  litellm_migrations:
    driver: local
  ollama_data:
    driver: local
